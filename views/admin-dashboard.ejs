<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.css" rel="stylesheet">
    <style>
        .sidebar {
            min-height: 100vh;
            background: #343a40;
            color: white;
        }
        .nav-link {
            color: rgba(255,255,255,.8);
        }
        .nav-link:hover {
            color: white;
        }
        .main-content {
            padding: 20px;
        }
        .stat-card {
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .activity-log {
            max-height: 400px;
            overflow-y: auto;
        }
        .sidebar li {
            padding: 10px;
            margin: 5px 0;
            border-radius: 5px;
            transition: background-color 0.3s;
        }
        .sidebar li:hover {
            background-color: rgba(255,255,255,0.1);
        }
        .sidebar li[onclick] {
            cursor: pointer;
        }
        .activity-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
        }
        .activity-item:last-child {
            border-bottom: none;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-2 sidebar p-3">
                <h3 class="mb-4">Admin Panel</h3>
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link active" href="#dashboard">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/admin/orders">Orders</a>
                    </li>
                    <li onclick="window.location.href='/owner/admin'">Add Products</li>
                    <li onclick="window.location.href='/inventory'">Inventory Management</li>
                    <li class="nav-item mt-5">
                        <a class="nav-link text-danger" href="/logout">Logout</a>
                    </li>
                </ul>
            </div>

            <!-- Main Content -->
            <div class="col-md-10 main-content">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Dashboard</h2>
                    <div>
                        <span class="text-muted">Session Timeout: </span>
                        <span id="sessionTimer">30:00</span>
                    </div>
                </div>

                <!-- Statistics Cards -->
                <div class="row">
                    <div class="col-md-3">
                        <div class="stat-card bg-primary text-white">
                            <h5>Total Users</h5>
                            <h2 id="totalUsers">0</h2>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card bg-success text-white">
                            <h5>Active Orders</h5>
                            <h2 id="activeOrders">0</h2>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card bg-info text-white">
                            <h5>Total Revenue</h5>
                            <h2 id="totalRevenue">Rs0</h2>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="stat-card bg-warning text-white">
                            <h5>Products</h5>
                            <h2 id="totalProducts">0</h2>
                        </div>
                    </div>
                </div>

                <!-- Charts -->
                <div class="row mt-4">
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Revenue Analytics</h5>
                                <canvas id="revenueChart"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">User Growth</h5>
                                <canvas id="userChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Activity Log -->
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Recent Orders</h5>
                                <div class="activity-log" id="activityLog">
                                    <!-- Activity logs will be inserted here -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
    <script>
        // Session timeout handling
        let sessionTimeout = 30 * 60; // 30 minutes in seconds
        const timerElement = document.getElementById('sessionTimer');

        function updateTimer() {
            const minutes = Math.floor(sessionTimeout / 60);
            const seconds = sessionTimeout % 60;
            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            
            if (sessionTimeout <= 0) {
                window.location.href = '/logout';
            } else {
                sessionTimeout--;
                setTimeout(updateTimer, 1000);
            }
        }

        // Reset timer on user activity
        document.addEventListener('mousemove', () => {
            sessionTimeout = 30 * 60;
        });

        // Initialize charts
        const revenueCtx = document.getElementById('revenueChart').getContext('2d');
        const userCtx = document.getElementById('userChart').getContext('2d');

        let revenueChart = null;
        let userChart = null;

        // Fetch dashboard data
        async function fetchDashboardData() {
            try {
                const response = await fetch('/owner/admin/dashboard/data');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Received dashboard data:', data);

                // Update statistics
                document.getElementById('totalUsers').textContent = data.stats.totalUsers;
                document.getElementById('activeOrders').textContent = data.stats.activeOrders;
                document.getElementById('totalRevenue').textContent = `Rs${data.stats.totalRevenue.toFixed(2)}`;
                document.getElementById('totalProducts').textContent = data.stats.totalProducts;

                // Update activity log
                const activityLog = document.getElementById('activityLog');
                activityLog.innerHTML = data.recentOrders.map(order => `
                    <div class="activity-item">
                        <strong>${order.user.name}</strong> placed an order
                        <span class="text-muted">(Rs${order.total.toFixed(2)})</span>
                        <br>
                        <small class="text-muted">${new Date(order.createdAt).toLocaleString()}</small>
                    </div>
                `).join('');

                // Update revenue chart
                if (revenueChart) revenueChart.destroy();
                revenueChart = new Chart(revenueCtx, {
                    type: 'line',
                    data: {
                        labels: data.revenueData.map(item => item._id),
                        datasets: [{
                            label: 'Daily Revenue',
                            data: data.revenueData.map(item => item.dailyRevenue),
                            borderColor: 'rgb(75, 192, 192)',
                            tension: 0.1,
                            fill: false
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: value => 'Rs' + value.toFixed(2)
                                }
                            }
                        },
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: context => 'Rs' + context.parsed.y.toFixed(2)
                                }
                            }
                        }
                    }
                });

                // Update user growth chart
                if (userChart) userChart.destroy();
                userChart = new Chart(userCtx, {
                    type: 'bar',
                    data: {
                        labels: data.userGrowth.map(item => item._id),
                        datasets: [{
                            label: 'New Users',
                            data: data.userGrowth.map(item => item.count),
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgb(54, 162, 235)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        }
                    }
                });
            } catch (error) {
                console.error('Error fetching dashboard data:', error);
            }
        }

        // Initial fetch
        fetchDashboardData();

        // Refresh data every 30 seconds
        setInterval(fetchDashboardData, 30000);
    </script>
</body>
</html> 